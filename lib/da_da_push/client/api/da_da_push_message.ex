# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule DaDaPush.Client.Api.DaDaPushMessage do
  @moduledoc """
  API calls for all endpoints tagged `DaDaPushMessage`.
  """

  alias DaDaPush.Client.Connection
  import DaDaPush.Client.RequestBuilder


  @doc """
  push Message to a Channel
  <h2>Rate Limit:</h2><ul><li>1 request per 1s</li><li>30 request per 1m</li><li>500 request per 1h</li></ul><h2>Result code/errmsg List:</h2><ul><li>0: ok</li><li>1: server error</li><li>101: channel is exists</li><li>102: channel is not exists</li><li>103: channel token error</li><li>104: channel is not exists</li><li>105: message is not exists</li><li>204: bad request</li><li>205: permission deny</li><li>206: too many request, please after 5 minutes to try!</li><li>301: duplicate username/email</li><li>302: user is not exists</li><li>303: user password is error</li><li>304: client push token is error</li><li>305: user is disabled</li><li>306: your subscription is expired</li><li>307: user not subscribe channel</li></ul>

  ## Parameters

  - connection (DaDaPush.Client.Connection): Connection to server
  - body (MessagePushRequest): body
  - opts (KeywordList): [optional] Optional parameters
    - :x_channel_token (String.t): see: https://www.dadapush.com/channel/list
  ## Returns

  {:ok, %DaDaPush.Client.Model.ResultOfMessagePushResponse{}} on success
  {:error, info} on failure
  """
  @spec create_message(Tesla.Env.client, DaDaPush.Client.Model.MessagePushRequest.t, keyword()) :: {:ok, DaDaPush.Client.Model.ResultOfMessagePushResponse.t} | {:error, Tesla.Env.t}
  def create_message(connection, body, opts \\ []) do
    optional_params = %{
      :"x-channel-token" => :headers
    }
    %{}
    |> method(:post)
    |> url("/api/v1/message")
    |> add_param(:body, :body, body)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %DaDaPush.Client.Model.ResultOfMessagePushResponse{}}
    ])
  end

  @doc """
  delete a Channel Message
  <h2>Rate Limit:</h2><ul><li>10 request per 1s</li><li>100 request per 1m</li><li>1000 request per 1h</li></ul><h2>Result code/errmsg List:</h2><ul><li>0: ok</li><li>1: server error</li><li>101: channel is exists</li><li>102: channel is not exists</li><li>103: channel token error</li><li>104: channel is not exists</li><li>105: message is not exists</li><li>204: bad request</li><li>205: permission deny</li><li>206: too many request, please after 5 minutes to try!</li><li>301: duplicate username/email</li><li>302: user is not exists</li><li>303: user password is error</li><li>304: client push token is error</li><li>305: user is disabled</li><li>306: your subscription is expired</li><li>307: user not subscribe channel</li></ul>

  ## Parameters

  - connection (DaDaPush.Client.Connection): Connection to server
  - message_id (integer()): messageId
  - opts (KeywordList): [optional] Optional parameters
    - :x_channel_token (String.t): see: https://www.dadapush.com/channel/list
  ## Returns

  {:ok, %DaDaPush.Client.Model.Result{}} on success
  {:error, info} on failure
  """
  @spec delete_message(Tesla.Env.client, integer(), keyword()) :: {:ok, DaDaPush.Client.Model.Result.t} | {:error, Tesla.Env.t}
  def delete_message(connection, message_id, opts \\ []) do
    optional_params = %{
      :"x-channel-token" => :headers
    }
    %{}
    |> method(:delete)
    |> url("/api/v1/message/#{message_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %DaDaPush.Client.Model.Result{}}
    ])
  end

  @doc """
  get a Channel Message
  <h2>Rate Limit:</h2><ul><li>10 request per 1s</li><li>100 request per 1m</li><li>1000 request per 1h</li></ul><h2>Result code/errmsg List:</h2><ul><li>0: ok</li><li>1: server error</li><li>101: channel is exists</li><li>102: channel is not exists</li><li>103: channel token error</li><li>104: channel is not exists</li><li>105: message is not exists</li><li>204: bad request</li><li>205: permission deny</li><li>206: too many request, please after 5 minutes to try!</li><li>301: duplicate username/email</li><li>302: user is not exists</li><li>303: user password is error</li><li>304: client push token is error</li><li>305: user is disabled</li><li>306: your subscription is expired</li><li>307: user not subscribe channel</li></ul>

  ## Parameters

  - connection (DaDaPush.Client.Connection): Connection to server
  - message_id (integer()): messageId
  - opts (KeywordList): [optional] Optional parameters
    - :x_channel_token (String.t): see: https://www.dadapush.com/channel/list
  ## Returns

  {:ok, %DaDaPush.Client.Model.ResultOfMessageObject{}} on success
  {:error, info} on failure
  """
  @spec get_message(Tesla.Env.client, integer(), keyword()) :: {:ok, DaDaPush.Client.Model.ResultOfMessageObject.t} | {:error, Tesla.Env.t}
  def get_message(connection, message_id, opts \\ []) do
    optional_params = %{
      :"x-channel-token" => :headers
    }
    %{}
    |> method(:get)
    |> url("/api/v1/message/#{message_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %DaDaPush.Client.Model.ResultOfMessageObject{}}
    ])
  end

  @doc """
  get Message List
  <h2>Rate Limit:</h2><ul><li>1 request per 1s</li><li>45 request per 1m</li></ul><h2>Result code/errmsg List:</h2><ul><li>0: ok</li><li>1: server error</li><li>101: channel is exists</li><li>102: channel is not exists</li><li>103: channel token error</li><li>104: channel is not exists</li><li>105: message is not exists</li><li>204: bad request</li><li>205: permission deny</li><li>206: too many request, please after 5 minutes to try!</li><li>301: duplicate username/email</li><li>302: user is not exists</li><li>303: user password is error</li><li>304: client push token is error</li><li>305: user is disabled</li><li>306: your subscription is expired</li><li>307: user not subscribe channel</li></ul>

  ## Parameters

  - connection (DaDaPush.Client.Connection): Connection to server
  - page (integer()): greater than 1
  - page_size (integer()): range is 1,50
  - opts (KeywordList): [optional] Optional parameters
    - :x_channel_token (String.t): see: https://www.dadapush.com/channel/list
  ## Returns

  {:ok, %DaDaPush.Client.Model.ResultOfPageResponseOfMessageObject{}} on success
  {:error, info} on failure
  """
  @spec get_messages(Tesla.Env.client, integer(), integer(), keyword()) :: {:ok, DaDaPush.Client.Model.ResultOfPageResponseOfMessageObject.t} | {:error, Tesla.Env.t}
  def get_messages(connection, page, page_size, opts \\ []) do
    optional_params = %{
      :"x-channel-token" => :headers
    }
    %{}
    |> method(:get)
    |> url("/api/v1/messages")
    |> add_param(:query, :"page", page)
    |> add_param(:query, :"pageSize", page_size)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %DaDaPush.Client.Model.ResultOfPageResponseOfMessageObject{}}
    ])
  end
end
